#!/usr/bin/env python

# nxos-bootstrap

import sys
import os
import json
import argparse
import subprocess
import logging

import aeon.nxos as nxos
from aeon.nxos.exceptions import NxosException
from aeon.exceptions import ProbeError, UnauthorizedError

_PROGNAME = 'nxos-bootstrap'
_PROGVER = '0.0.1'

# ##### -----------------------------------------------------------------------
# #####
# #####                           Command Line Arguments
# #####
# ##### -----------------------------------------------------------------------

psr = argparse.ArgumentParser(
    prog=_PROGNAME,
    description="Aeon ZTP bootstrapper for NXOS",
    add_help=True)

psr.add_argument(
    '-t', '--target', required=True,
    help='hostname or ip_addr of target device')

psr.add_argument(
    '--server', required=True,
    help='ip-addr of the server hosting the image files')

psr.add_argument(
    '--topdir', required=True,
    help='toplevel directory containing files')

psr.add_argument(
    '--logfile',
    help='name of log file')

# ##### -------------------------
# ##### authentication
# ##### -------------------------

group = psr.add_argument_group('authentication')

group.add_argument(
    '-U', dest='user_var',
    required=True,
    help='Username environment variable')

group.add_argument(
    '-P', dest='passwd_var',
    required=True,
    help='Passwd environment variable')

g_cli_args = psr.parse_args()
g_log = logging.getLogger(name=_PROGNAME)


def setup_logging():
    g_log.setLevel(logging.INFO)
    fh = logging.FileHandler(g_cli_args.logfile)
    fmt = logging.Formatter(
        '%(asctime)s:%(levelname)s: {target}:%(message)s'
        .format(target=g_cli_args.target))
    fh.setFormatter(fmt)
    g_log.addHandler(fh)

if g_cli_args.logfile:
    setup_logging()


# ##### -----------------------------------------------------------------------
# #####
# #####                           Utility Functions
# #####
# ##### -----------------------------------------------------------------------

def exit_results(results, exit_error=None):
    json.dump(results, fp=sys.stdout)
    sys.exit(0 if results['ok'] is True else exit_error or 1)


# ##### -----------------------------------------------------------------------
# #####
# #####                           Main Code Functions
# #####
# ##### -----------------------------------------------------------------------

def push_config1(dev):
    topdir = g_cli_args.topdir
    config_dir = os.path.join(topdir, 'etc', 'configs', 'nxos')
    all_fpath = os.path.join(config_dir, 'all.conf')
    model_fpath = os.path.join(config_dir, dev.facts['hw_model'] + '.conf')

    if os.path.isfile(all_fpath):
        g_log.info('reading from: {}'.format(all_fpath))
        conf = open(all_fpath).read()
        g_log.info('pushing all config to device')
        dev.api.exec_config(conf)

    if os.path.isfile(model_fpath):
        g_log.info('reading model config from: {}'.format(model_fpath))
        conf = open(model_fpath).read()
        g_log.info('pushing model config to device')
        dev.api.exec_config(conf)


def check_os_install(dev):
    profile_dir = os.path.join(g_cli_args.topdir, 'etc', 'profiles', 'default', 'nxos')
    conf_fpath = os.path.join(profile_dir, 'os-selector.cfg')

    cmd = "aztp-os-selector -m {hw_model} -o '{os_ver}' -c {config}".format(
        hw_model=dev.facts['hw_model'],
        os_ver=dev.facts['os_version'],
        config=conf_fpath)

    child = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)

    _stdout, _stderr = child.communicate()
    return json.loads(_stdout)


def do_os_install(dev, image_name):

    image_fpath = os.path.join(g_cli_args.topdir,
                               'etc', 'image-catalog',
                               image_name)

    cmd = "nxos-installos --target {target} --server {server} " \
          "-U {u_env} -P {p_env} --image-profile {profile}".format(
        target=dev.target, server=g_cli_args.server,
        u_env=g_cli_args.user_var, p_env=g_cli_args.passwd_var,
        profile=image_fpath)

    if g_cli_args.logfile:
        cmd += ' --logfile %s' % g_cli_args.logfile

    child = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
    _stdout, _stderr = child.communicate()
    return json.loads(_stdout)


def start(dev):
    g_log.info("starting bootstrap process")

    push_config1(dev)

    os_install = check_os_install(dev)
    if os_install['image']:
        g_log.info('softare image install required: %s' % os_install['image'])
        got = do_os_install(dev, image_name=os_install['image'])
        if not got['ok']:
            g_log.info('software install FAILED: %s' % json.dumps(got))
        else:
            g_log.info('software install OK: %s' % json.dumps(got))
    else:
        g_log.info('no software install required')

    g_log.info("bootstrap process finished")

def main():
    target = g_cli_args.target
    user = os.getenv(g_cli_args.user_var)
    passwd = os.getenv(g_cli_args.passwd_var)

    if not os.path.isdir(g_cli_args.topdir):
        exit_results(dict(
            ok=False,
            error_type='args',
            message='{} is not a directory'.format(g_cli_args.topdir)))

    try:
        dev = nxos.Device(target, user=user, passwd=passwd)

    except ProbeError:
        exit_results(dict(
            ok=False,
            error_type='login',
            message='Failed to probe target %s' % target))

    except UnauthorizedError:
        exit_results(dict(
            ok=False,
            error_type='login',
            message='Unauthorized - check user/password'))

    else:
        start(dev)

if '__main__' == __name__:
    main()
